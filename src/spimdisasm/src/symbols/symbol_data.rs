/* SPDX-FileCopyrightText: Â© 2024 Decompollaborate */
/* SPDX-License-Identifier: MIT */

use alloc::vec::Vec;
use rabbitizer::Vram;

use crate::{
    context::{Context, OwnedSegmentNotFoundError},
    metadata::GeneratedBy,
    parent_segment_info::ParentSegmentInfo,
    rom_address::RomAddress,
    section_type::SectionType,
    size::Size,
};

use super::Symbol;

pub struct SymbolData {
    rom: RomAddress,
    vram: Vram,
    raw_bytes: Vec<u8>,
    parent_segment_info: ParentSegmentInfo,
}

impl SymbolData {
    pub(crate) fn new(
        context: &mut Context,
        raw_bytes: Vec<u8>,
        rom: RomAddress,
        vram: Vram,
        _in_section_offset: usize,
        parent_segment_info: ParentSegmentInfo,
    ) -> Result<Self, OwnedSegmentNotFoundError> {
        let sym = context
            .find_owned_segment_mut(&parent_segment_info)?
            .add_symbol(
                vram,
                Some(rom),
                GeneratedBy::Autogenerated,
                Some(SectionType::Data),
                false,
            );
        *sym.autodetected_size_mut() = Some(Size::new(raw_bytes.len() as u32));
        sym.set_defined();

        Ok(Self {
            rom,
            vram,
            raw_bytes,
            parent_segment_info,
        })
    }
}

impl SymbolData {
    pub fn rom(&self) -> RomAddress {
        self.rom
    }

    // TODO: maybe remove?
    pub fn raw_bytes(&self) -> &[u8] {
        &self.raw_bytes
    }
}

impl Symbol for SymbolData {
    fn vram(&self) -> Vram {
        self.vram
    }

    fn size(&self) -> Size {
        Size::new(self.raw_bytes.len() as u32)
    }

    fn parent_segment_info(&self) -> &ParentSegmentInfo {
        &self.parent_segment_info
    }
}
