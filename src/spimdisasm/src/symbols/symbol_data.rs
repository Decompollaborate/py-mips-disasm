/* SPDX-FileCopyrightText: Â© 2024 Decompollaborate */
/* SPDX-License-Identifier: MIT */

use alloc::vec::Vec;
use rabbitizer::Vram;

use crate::{
    address_range::AddressRange,
    context::{Context, OwnedSegmentNotFoundError},
    metadata::GeneratedBy,
    parent_segment_info::ParentSegmentInfo,
    relocation::RelocationInfo,
    rom_address::RomAddress,
    section_type::SectionType,
    size::Size,
};

use super::{trait_symbol::RomSymbol, Symbol};

pub struct SymbolData {
    rom_range: AddressRange<RomAddress>,
    vram_range: AddressRange<Vram>,
    raw_bytes: Vec<u8>,
    parent_segment_info: ParentSegmentInfo,
    relocs: Vec<Option<RelocationInfo>>,
}

impl SymbolData {
    pub(crate) fn new(
        context: &mut Context,
        raw_bytes: Vec<u8>,
        rom: RomAddress,
        vram: Vram,
        _in_section_offset: usize,
        parent_segment_info: ParentSegmentInfo,
    ) -> Result<Self, OwnedSegmentNotFoundError> {
        let size = Size::new(raw_bytes.len() as u32);
        let rom_range = AddressRange::new(rom, rom + size);
        let vram_range = AddressRange::new(vram, vram + size);

        let relocs = vec![None; raw_bytes.len() / 4];

        let sym = context
            .find_owned_segment_mut(&parent_segment_info)?
            .add_symbol(
                vram,
                Some(rom),
                GeneratedBy::Autogenerated,
                Some(SectionType::Data),
                false,
            );
        *sym.autodetected_size_mut() = Some(size);
        sym.set_defined();

        Ok(Self {
            rom_range,
            vram_range,
            raw_bytes,
            parent_segment_info,
            relocs,
        })
    }
}

impl SymbolData {
    // TODO: maybe remove?
    pub fn raw_bytes(&self) -> &[u8] {
        &self.raw_bytes
    }
}

impl Symbol for SymbolData {
    fn vram_range(&self) -> AddressRange<Vram> {
        self.vram_range
    }

    fn parent_segment_info(&self) -> &ParentSegmentInfo {
        &self.parent_segment_info
    }
}

impl RomSymbol for SymbolData {
    fn rom_range(&self) -> AddressRange<RomAddress> {
        self.rom_range
    }

    fn relocs(&self) -> &[Option<RelocationInfo>] {
        &self.relocs
    }
}
