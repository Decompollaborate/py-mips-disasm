/* SPDX-FileCopyrightText: Â© 2024 Decompollaborate */
/* SPDX-License-Identifier: MIT */

use alloc::vec::Vec;
use rabbitizer::Vram;

use crate::{
    context::{Context, OwnedSegmentNotFoundError},
    metadata::GeneratedBy,
    parent_segment_info::ParentSegmentInfo,
    rom_address::RomAddress,
    section_type::SectionType,
    size::Size,
};

use super::{Symbol, SymbolBase};

pub struct SymbolData {
    symbol_base: SymbolBase,
    // TODO: remove
    #[allow(dead_code)]
    raw_bytes: Vec<u8>,
}

impl SymbolData {
    pub(crate) fn new(
        context: &mut Context,
        raw_bytes: Vec<u8>,
        rom: RomAddress,
        vram: Vram,
        _in_section_offset: usize,
        parent_segment_info: &ParentSegmentInfo,
    ) -> Result<Self, OwnedSegmentNotFoundError> {
        let sym = context
            .find_owned_segment_mut(parent_segment_info)?
            .add_symbol(
                vram,
                Some(rom),
                GeneratedBy::Autogenerated,
                Some(SectionType::Data),
                false,
            );
        sym.set_autodetected_size(Size::new(raw_bytes.len() as u32));

        Ok(Self {
            symbol_base: SymbolBase::new(Some(rom), vram),
            raw_bytes,
        })
    }
}

impl Symbol for SymbolData {
    fn symbol_base(&self) -> &SymbolBase {
        &self.symbol_base
    }
}
