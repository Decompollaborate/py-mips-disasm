/* SPDX-FileCopyrightText: Â© 2024 Decompollaborate */
/* SPDX-License-Identifier: MIT */

use alloc::vec::Vec;
use rabbitizer::{Instruction, Vram};

use crate::{
    context::{Context, OwnedSegmentNotFoundError},
    metadata::GeneratedBy,
    parent_segment_info::ParentSegmentInfo,
    rom_address::RomAddress,
    size::Size,
};

use super::{
    display::{FunctionDisplay, FunctionDisplaySettings},
    Symbol,
};

#[derive(Debug, Clone, Hash, PartialEq)]
pub struct SymbolFunction {
    rom: RomAddress,
    vram: Vram,
    instructions: Vec<Instruction>,
    parent_segment_info: ParentSegmentInfo,
}

impl SymbolFunction {
    pub(crate) fn new(
        context: &mut Context,
        instructions: Vec<Instruction>,
        rom: RomAddress,
        vram: Vram,
        _in_section_offset: usize,
        parent_segment_info: ParentSegmentInfo,
    ) -> Result<Self, OwnedSegmentNotFoundError> {
        let sym = context
            .find_owned_segment_mut(&parent_segment_info)?
            .add_function(vram, Some(rom), GeneratedBy::Autogenerated);
        *sym.autodetected_size_mut() = Some(Size::new(instructions.len() as u32 * 4));
        sym.set_defined();

        Ok(Self {
            rom,
            vram,
            instructions,
            parent_segment_info,
        })
    }
}

impl SymbolFunction {
    pub fn rom(&self) -> RomAddress {
        self.rom
    }

    // TODO: maybe remove?
    pub fn instructions(&self) -> &[Instruction] {
        &self.instructions
    }
}

impl<'ctx, 'sym, 'flg> SymbolFunction {
    pub fn display(
        &'sym self,
        context: &'ctx Context,
        settings: &'flg FunctionDisplaySettings,
    ) -> FunctionDisplay<'ctx, 'sym, 'flg> {
        FunctionDisplay::new(context, self, settings)
    }
}

impl Symbol for SymbolFunction {
    fn vram(&self) -> Vram {
        self.vram
    }

    fn size(&self) -> Size {
        Size::new(self.instructions.len() as u32 * 4)
    }

    fn parent_segment_info(&self) -> &ParentSegmentInfo {
        &self.parent_segment_info
    }
}
