/* SPDX-FileCopyrightText: Â© 2024 Decompollaborate */
/* SPDX-License-Identifier: MIT */

use alloc::vec::Vec;
use rabbitizer::{Instruction, Vram};

use crate::{
    address_range::AddressRange,
    analysis::{InstructionAnalysisResult, InstructionAnalyzer},
    context::{Context, OwnedSegmentNotFoundError},
    metadata::{GeneratedBy, SegmentMetadata},
    parent_segment_info::ParentSegmentInfo,
    relocation::{RelocReferencedSym, RelocationInfo, RelocationType},
    rom_address::RomAddress,
    rom_vram_range::RomVramRange,
    size::Size,
};

use super::{
    display::{FunctionDisplay, FunctionDisplaySettings},
    trait_symbol::RomSymbol,
    Symbol,
};

#[derive(Debug, Clone, Hash, PartialEq)]
pub struct SymbolFunction {
    ranges: RomVramRange,
    instructions: Vec<Instruction>,
    parent_segment_info: ParentSegmentInfo,

    instr_analysis: InstructionAnalysisResult,
    relocs: Vec<Option<RelocationInfo>>,
}

impl SymbolFunction {
    pub(crate) fn new(
        context: &mut Context,
        instructions: Vec<Instruction>,
        rom: RomAddress,
        vram: Vram,
        _in_section_offset: usize,
        parent_segment_info: ParentSegmentInfo,
    ) -> Result<Self, OwnedSegmentNotFoundError> {
        let size = Size::new(instructions.len() as u32 * 4);
        let rom_range = AddressRange::new(rom, rom + size);
        let vram_range = AddressRange::new(vram, vram + size);
        let ranges = RomVramRange::new(rom_range, vram_range);

        let mut relocs = vec![None; instructions.len()];

        let instr_analysis = InstructionAnalyzer::analyze(context, ranges, &instructions);

        let owned_segment = context.find_owned_segment_mut(&parent_segment_info)?;
        let sym = owned_segment.add_function(vram, Some(rom), GeneratedBy::Autogenerated);
        *sym.autodetected_size_mut() = Some(size);
        sym.set_defined();

        Self::process_instr_analysis_result_owned(
            &mut relocs,
            &instr_analysis,
            &ranges,
            owned_segment,
        );
        Self::process_instr_analysis_result_referenced(
            &mut relocs,
            &instr_analysis,
            &ranges,
            context,
            &parent_segment_info,
        );

        Ok(Self {
            ranges,
            instructions,
            parent_segment_info,
            instr_analysis,
            relocs,
        })
    }

    fn process_instr_analysis_result_owned(
        relocs: &mut [Option<RelocationInfo>],
        instr_analysis: &InstructionAnalysisResult,
        ranges: &RomVramRange,
        owned_segment: &mut SegmentMetadata,
    ) {
        // TOOD: Consider moving reloc generation to a later step

        for (instr_rom, target_vram) in instr_analysis.branch_targets() {
            /*
            if common.GlobalConfig.INPUT_FILE_TYPE == common.InputFileType.ELF:
                if self.getVromOffset(instrOffset) in self.context.globalRelocationOverrides:
                    # Avoid creating wrong symbols on elf files
                    continue
            */

            let branch_sym = owned_segment.add_branch_label(
                *target_vram,
                ranges.rom_from_vram(*target_vram),
                GeneratedBy::Autogenerated,
            );
            if let Some(typ) = branch_sym.sym_type() {
                if typ.valid_branch_target() {
                    let instr_index = (*instr_rom - ranges.rom().start()).inner() / 4;
                    relocs[instr_index as usize] = Some(
                        RelocationType::R_MIPS_PC16
                            .new_reloc_info(RelocReferencedSym::Address(*target_vram)),
                    );

                    /*
                    labelSym.referenceCounter += 1
                    labelSym.referenceFunctions.add(self.contextSym)
                    labelSym.parentFunction = self.contextSym
                    labelSym.parentFileName = self.contextSym.parentFileName
                    self.contextSym.branchLabels.add(labelSym.vram, labelSym)
                    */
                }
            }
        }

        // Jump tables
        for target_vram in instr_analysis.referenced_jumptables().values() {
            let _jumptable =
                owned_segment.add_jumptable(*target_vram, None, GeneratedBy::Autogenerated);
            /*
            jumpTable.parentFunction = self.contextSym
            self.contextSym.jumpTables.add(jumpTable.vram, jumpTable)
            */
        }
    }

    fn process_instr_analysis_result_referenced(
        relocs: &mut [Option<RelocationInfo>],
        instr_analysis: &InstructionAnalysisResult,
        ranges: &RomVramRange,
        context: &mut Context,
        parent_segment_info: &ParentSegmentInfo,
    ) {
        for (instr_rom, target_vram) in instr_analysis.func_calls() {
            /*
            if self.context.isAddressBanned(targetVram):
                continue
            */

            /*
            if common.GlobalConfig.INPUT_FILE_TYPE == common.InputFileType.ELF:
                if self.getVromOffset(instrOffset) in self.context.globalRelocationOverrides:
                    # Avoid creating wrong symbols on elf files
                    continue
            */

            if let Some(referenced_segment) =
                context.find_referenced_segment_mut(*target_vram, parent_segment_info)
            {
                let _func_sym =
                    referenced_segment.add_function(*target_vram, None, GeneratedBy::Autogenerated);
                /*
                funcSym.referenceCounter += 1
                funcSym.referenceFunctions.add(self.contextSym)
                */
            }
            let instr_index = (*instr_rom - ranges.rom().start()).inner() / 4;
            relocs[instr_index as usize] = Some(
                RelocationType::R_MIPS_26.new_reloc_info(RelocReferencedSym::Address(*target_vram)),
            );
        }

        for (instr_rom, symbol_vram) in instr_analysis.address_per_lo_instr() {
            /*
            if self.context.isAddressBanned(symVram):
                continue
            */
            /*
            if common.GlobalConfig.INPUT_FILE_TYPE == common.InputFileType.ELF:
                if self.getVromOffset(loOffset) in self.context.globalRelocationOverrides:
                    # Avoid creating wrong symbols on elf files
                    continue
            */
            /*
            symAccessDict = self.instrAnalyzer.possibleSymbolTypes.get(symVram, dict())
            symAccess = None
            if len(symAccessDict) == 1:
                # Infer type info if there's only one access type
                symAccess = list(symAccessDict)[0]
            */

            if let Some(referenced_segment) =
                context.find_referenced_segment_mut(*symbol_vram, parent_segment_info)
            {
                let _sym = referenced_segment.add_symbol(
                    *symbol_vram,
                    None,
                    GeneratedBy::Autogenerated,
                    None,
                    true,
                );
                /*
                contextSym = self.addSymbol(symVram, isAutogenerated=True, allowAddendInstead=True)
                if contextSym is not None:
                    # TODO: do this in a less ugly way
                    if contextSym.address != symVram:
                        if contextSym.address % 4 != 0 or symVram % 4 != 0:
                            if contextSym.getType() in {"u16", "s16", "u8", "u8"} or (symAccess is not None and symAccess.accessType in {rabbitizer.AccessType.BYTE, rabbitizer.AccessType.SHORT}):
                                if not (contextSym.getSize() > 4):
                                    if contextSym.userDeclaredSize is None or symVram >= contextSym.address + contextSym.userDeclaredSize:
                                        if symAccess is not None:
                                            contextSym.setAccessTypeIfUnset(symAccess.accessType, symAccess.unsignedMemoryAccess)
                                        contextSym.setFirstLoAccessIfUnset(loOffset)
                                        contextSym = self.addSymbol(symVram, isAutogenerated=True)
                */

                /*
                contextSym.referenceCounter += 1
                contextSym.referenceFunctions.add(self.contextSym)
                contextSym.setFirstLoAccessIfUnset(loOffset)
                if symAccess is not None:
                    contextSym.setAccessTypeIfUnset(symAccess.accessType, symAccess.unsignedMemoryAccess)
                    if contextSym.isAutogenerated:
                        # Handle mips1 doublefloats
                        if contextSym.accessType == rabbitizer.AccessType.FLOAT and common.GlobalConfig.ABI == common.Abi.O32:
                            instr = self.instructions[loOffset//4]
                            if instr.doesDereference() and instr.isFloat() and not instr.isDouble():
                                if instr.ft.value % 2 != 0:
                                    # lwc1/swc1 with an odd fpr means it is an mips1 doublefloats reference
                                    if symVram % 8 != 0:
                                        # We need to remove the the symbol pointing to the middle of this doublefloats
                                        got = contextSym.isGot
                                        gotLocal = contextSym.isGotLocal
                                        gotGlobal = contextSym.isGotGlobal
                                        self.removeSymbol(symVram)

                                        # Align down to 8
                                        symVram = (symVram >> 3) << 3
                                        contextSym = self.addSymbol(symVram, isAutogenerated=True)
                                        contextSym.referenceCounter += 1
                                        contextSym.referenceFunctions.add(self.contextSym)
                                        contextSym.setFirstLoAccessIfUnset(loOffset)
                                        contextSym.isGot = got
                                        contextSym.isGotLocal = gotLocal
                                        contextSym.isGotGlobal = gotGlobal
                                    contextSym.accessType = rabbitizer.AccessType.DOUBLEFLOAT
                                    contextSym.unsignedAccessType = False
                                    contextSym.isMips1Double = True
                */
            }

            let instr_index = (*instr_rom - ranges.rom().start()).inner() / 4;
            relocs[instr_index as usize] = Some(
                RelocationType::R_MIPS_LO16
                    .new_reloc_info(RelocReferencedSym::Address(*symbol_vram)),
            );
        }
        for (instr_rom, symbol_vram) in instr_analysis.address_per_hi_instr() {
            let instr_index = (*instr_rom - ranges.rom().start()).inner() / 4;
            relocs[instr_index as usize] = Some(
                RelocationType::R_MIPS_HI16
                    .new_reloc_info(RelocReferencedSym::Address(*symbol_vram)),
            );
        }

        // self._generateRelocsFromInstructionAnalyzer()

        /*
        # To debug jumptable rejection change this check to `True`
        if False:
            for jrInstrOffset, (referenceOffset, jtblAddress, branchOffset) in self.instrAnalyzer.rejectedjumpRegisterIntrOffset.items():
                self.endOfLineComment[jrInstrOffset//4] = f" /* Jumping to something at address 0x{jtblAddress:08X} (inferred from 0x{self.getVromOffset(referenceOffset):X}). Jumptable rejected by instruction at vrom 0x{self.getVromOffset(branchOffset):X} */
        "
        */

        /*
        if self.isLikelyHandwritten:
            for instr in self.instructions:
                instr.inHandwrittenFunction = self.isLikelyHandwritten
        */
    }
}

impl SymbolFunction {
    // TODO: maybe remove?
    pub fn instructions(&self) -> &[Instruction] {
        &self.instructions
    }
}

impl<'ctx, 'sym, 'flg> SymbolFunction {
    pub fn display(
        &'sym self,
        context: &'ctx Context,
        settings: &'flg FunctionDisplaySettings,
    ) -> FunctionDisplay<'ctx, 'sym, 'flg> {
        FunctionDisplay::new(context, self, settings)
    }
}

impl Symbol for SymbolFunction {
    fn vram_range(&self) -> AddressRange<Vram> {
        self.ranges.vram()
    }

    fn parent_segment_info(&self) -> &ParentSegmentInfo {
        &self.parent_segment_info
    }
}

impl RomSymbol for SymbolFunction {
    #[must_use]
    fn rom_vram_range(&self) -> RomVramRange {
        self.ranges
    }

    #[must_use]
    fn relocs(&self) -> &[Option<RelocationInfo>] {
        &self.relocs
    }
}
