/* SPDX-FileCopyrightText: Â© 2024 Decompollaborate */
/* SPDX-License-Identifier: MIT */

use alloc::vec::Vec;
use rabbitizer::{Instruction, Vram};

use crate::{
    address_range::AddressRange,
    analysis::{InstructionAnalysisResult, InstructionAnalyzer},
    context::{Context, OwnedSegmentNotFoundError},
    metadata::GeneratedBy,
    parent_segment_info::ParentSegmentInfo,
    relocation::{RelocReferencedSym, RelocationInfo, RelocationType},
    rom_address::RomAddress,
    rom_vram_range::RomVramRange,
    size::Size,
};

use super::{
    display::{FunctionDisplay, FunctionDisplaySettings},
    trait_symbol::RomSymbol,
    Symbol,
};

#[derive(Debug, Clone, Hash, PartialEq)]
pub struct SymbolFunction {
    ranges: RomVramRange,
    instructions: Vec<Instruction>,
    parent_segment_info: ParentSegmentInfo,

    instr_analysis: InstructionAnalysisResult,
    relocs: Vec<Option<RelocationInfo>>,
}

impl SymbolFunction {
    pub(crate) fn new(
        context: &mut Context,
        instructions: Vec<Instruction>,
        rom: RomAddress,
        vram: Vram,
        _in_section_offset: usize,
        parent_segment_info: ParentSegmentInfo,
    ) -> Result<Self, OwnedSegmentNotFoundError> {
        let size = Size::new(instructions.len() as u32 * 4);
        let rom_range = AddressRange::new(rom, rom + size);
        let vram_range = AddressRange::new(vram, vram + size);
        let ranges = RomVramRange::new(rom_range, vram_range);

        let mut relocs = vec![None; instructions.len()];

        let instr_analysis = InstructionAnalyzer::analyze(context, ranges, &instructions);

        let owned_segment = context.find_owned_segment_mut(&parent_segment_info)?;
        let sym = owned_segment.add_function(vram, Some(rom), GeneratedBy::Autogenerated);
        *sym.autodetected_size_mut() = Some(size);
        sym.set_defined();

        for (instr_rom, target_vram) in instr_analysis.branch_targets() {
            /*
            if common.GlobalConfig.INPUT_FILE_TYPE == common.InputFileType.ELF:
                if self.getVromOffset(instrOffset) in self.context.globalRelocationOverrides:
                    # Avoid creating wrong symbols on elf files
                    continue
            */

            let branch_sym = owned_segment.add_branch_label(
                *target_vram,
                ranges.rom_from_vram(*target_vram),
                GeneratedBy::Autogenerated,
            );
            if let Some(typ) = branch_sym.sym_type() {
                if typ.valid_branch_target() {
                    let instr_index = (*instr_rom - rom).inner() / 4;
                    relocs[instr_index as usize] = Some(
                        RelocationType::R_MIPS_PC16
                            .new_reloc_info(RelocReferencedSym::Address(*target_vram), 0),
                    );

                    /*
                    labelSym.referenceCounter += 1
                    labelSym.referenceFunctions.add(self.contextSym)
                    labelSym.parentFunction = self.contextSym
                    labelSym.parentFileName = self.contextSym.parentFileName
                    self.contextSym.branchLabels.add(labelSym.vram, labelSym)
                    */
                }
            }
        }

        for (instr_rom, target_vram) in instr_analysis.func_calls() {
            /*
            if self.context.isAddressBanned(targetVram):
                continue
            */

            /*
            if common.GlobalConfig.INPUT_FILE_TYPE == common.InputFileType.ELF:
                if self.getVromOffset(instrOffset) in self.context.globalRelocationOverrides:
                    # Avoid creating wrong symbols on elf files
                    continue
            */

            if let Some(referenced_segment) =
                context.find_referenced_segment_mut(*target_vram, &parent_segment_info)
            {
                let _func_sym =
                    referenced_segment.add_function(*target_vram, None, GeneratedBy::Autogenerated);
                /*
                funcSym.referenceCounter += 1
                funcSym.referenceFunctions.add(self.contextSym)
                */
            }
            let instr_index = (*instr_rom - rom).inner() / 4;
            relocs[instr_index as usize] = Some(
                RelocationType::R_MIPS_26
                    .new_reloc_info(RelocReferencedSym::Address(*target_vram), 0),
            );
        }

        Ok(Self {
            ranges,
            instructions,
            parent_segment_info,
            instr_analysis,
            relocs,
        })
    }
}

impl SymbolFunction {
    // TODO: maybe remove?
    pub fn instructions(&self) -> &[Instruction] {
        &self.instructions
    }
}

impl<'ctx, 'sym, 'flg> SymbolFunction {
    pub fn display(
        &'sym self,
        context: &'ctx Context,
        settings: &'flg FunctionDisplaySettings,
    ) -> FunctionDisplay<'ctx, 'sym, 'flg> {
        FunctionDisplay::new(context, self, settings)
    }
}

impl Symbol for SymbolFunction {
    fn vram_range(&self) -> AddressRange<Vram> {
        self.ranges.vram()
    }

    fn parent_segment_info(&self) -> &ParentSegmentInfo {
        &self.parent_segment_info
    }
}

impl RomSymbol for SymbolFunction {
    #[must_use]
    fn rom_vram_range(&self) -> RomVramRange {
        self.ranges
    }

    #[must_use]
    fn relocs(&self) -> &[Option<RelocationInfo>] {
        &self.relocs
    }
}
