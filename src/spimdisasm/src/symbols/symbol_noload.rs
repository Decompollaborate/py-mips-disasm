/* SPDX-FileCopyrightText: Â© 2024 Decompollaborate */
/* SPDX-License-Identifier: MIT */

use rabbitizer::Vram;

use crate::{
    address_range::AddressRange,
    context::{Context, OwnedSegmentNotFoundError},
    metadata::GeneratedBy,
    parent_segment_info::ParentSegmentInfo,
    section_type::SectionType,
};

use super::{
    display::{SymNoloadDisplay, SymNoloadDisplaySettings},
    Symbol,
};

#[derive(Debug, Clone, Hash, PartialEq)]
pub struct SymbolNoload {
    vram_range: AddressRange<Vram>,
    parent_segment_info: ParentSegmentInfo,
}

impl SymbolNoload {
    pub(crate) fn new(
        context: &mut Context,
        vram_range: AddressRange<Vram>,
        _in_section_offset: usize,
        parent_segment_info: ParentSegmentInfo,
    ) -> Result<Self, OwnedSegmentNotFoundError> {
        let sym = context
            .find_owned_segment_mut(&parent_segment_info)?
            .add_symbol(
                vram_range.start(),
                None,
                GeneratedBy::Autogenerated,
                Some(SectionType::Bss),
                false,
            );
        *sym.autodetected_size_mut() = Some(vram_range.size());
        sym.set_defined();

        Ok(Self {
            vram_range,
            parent_segment_info,
        })
    }
}

impl SymbolNoload {}

impl<'ctx, 'sym, 'flg> SymbolNoload {
    pub fn display(
        &'sym self,
        context: &'ctx Context,
        settings: &'flg SymNoloadDisplaySettings,
    ) -> SymNoloadDisplay<'ctx, 'sym, 'flg> {
        SymNoloadDisplay::new(context, self, settings)
    }
}

impl Symbol for SymbolNoload {
    fn vram_range(&self) -> &AddressRange<Vram> {
        &self.vram_range
    }

    fn parent_segment_info(&self) -> &ParentSegmentInfo {
        &self.parent_segment_info
    }

    #[must_use]
    fn section_type(&self) -> SectionType {
        SectionType::Bss
    }
}
