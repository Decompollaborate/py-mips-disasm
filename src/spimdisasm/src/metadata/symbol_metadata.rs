/* SPDX-FileCopyrightText: Â© 2024 Decompollaborate */
/* SPDX-License-Identifier: MIT */

use rabbitizer::{vram::VramOffset, Vram};

use crate::{rom_address::RomAddress, section_type::SectionType};

#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord)]
pub struct SymbolMetadata {
    vram: Vram,

    rom: Option<RomAddress>,

    section_type: Option<SectionType>,

    autogenerated: bool,
}

impl SymbolMetadata {
    pub(crate) fn new(vram: Vram) -> Self {
        Self {
            vram,

            rom: None,
            section_type: None,
            autogenerated: false,
        }
    }

    pub const fn vram(&self) -> Vram {
        self.vram
    }

    pub fn rom(&self) -> Option<RomAddress> {
        self.rom
    }
    pub fn update_rom(&mut self, new_rom: Option<RomAddress>) {
        if self.rom.is_none() {
            self.rom = new_rom;
        }
    }

    pub fn section_type(&self) -> Option<SectionType> {
        self.section_type
    }
    pub fn update_section_type(&mut self, new_section_type: Option<SectionType>) {
        if self.section_type.is_none() {
            self.section_type = new_section_type;
        }
    }

    pub fn user_declared_size(&self) -> Option<VramOffset> {
        // TODO
        None
    }

    pub fn size(&self) -> VramOffset {
        // TODO

        if let Some(user_size) = self.user_declared_size() {
            return user_size;
        }

        VramOffset::new(4)
    }

    pub fn autogenerated(&self) -> bool {
        self.autogenerated
    }
    pub fn autogenerated_mut(&mut self) -> &mut bool {
        &mut self.autogenerated
    }

}

impl SymbolMetadata {
    pub fn is_trustable_function(&self) -> bool {
        // TODO
        true
    }
}

impl SymbolMetadata {
    pub(crate) fn set_autocreated_from_other_sized_sym(&mut self) {
        // TODO
    }
}

